[{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/.eslintrc.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): .eslintrc.js","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n    parser: '@typescript-eslint/parser',\n    parserOptions: {\n        project: 'tsconfig.json',\n        tsconfigRootDir: __dirname,\n        sourceType: 'module',\n    },\n    plugins: ['@typescript-eslint'],\n    extends: [\n        'plugin:@typescript-eslint/recommended', // Best-practice TS rules\n        'plugin:prettier/recommended',           // Prettier integration\n    ],\n    root: true,\n    env: {\n        node: true,\n        jest: true,\n    },\n    // Use only the recommended rules for a balanced, modern setup\n    rules: {\n        // Warn instead of error for unused vars and any usage during migration\n        '@typescript-eslint/no-unused-vars': 'warn',\n        '@typescript-eslint/no-explicit-any': 'warn',\n    }\n};","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/app.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/app.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/common/database/database.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/common/database/database.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/common/entities/base.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/config/config.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/config/config.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/core.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/exceptions/all-exceptions.filter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/exceptions/exceptions.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/exceptions/http-exception-response.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/exceptions/http-exception.filter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/logging/logging.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/logging/logging.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/core/throttler/throttler.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/migrations/1698765432100-InitialMigration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/assets.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UseGuards' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'plainToInstance' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":38,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'attackSurfaceId' is defined but never used.","line":39,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createAssetDto' is defined but never used.","line":40,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":73,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'attackSurfaceId' is defined but never used.","line":74,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'skip' is defined but never used.","line":76,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is defined but never used.","line":77,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":97,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'attackSurfaceId' is defined but never used.","line":98,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":99,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":123,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'attackSurfaceId' is defined but never used.","line":124,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":125,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateAssetDto' is defined but never used.","line":126,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":146,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'attackSurfaceId' is defined but never used.","line":147,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":148,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\nimport { AssetsService } from './assets.service';\nimport { CreateAssetDto, UpdateAssetDto, AssetResponseDto } from './dto';\nimport { plainToInstance } from 'class-transformer';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n// import { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { User } from '../users/entities/user.entity';\n\n@ApiTags('assets')\n@ApiBearerAuth()\n@Controller('projects/:projectId/attack-surfaces/:attackSurfaceId/assets')\n// @UseGuards(JwtAuthGuard)\nexport class AssetsController {\n  constructor(private readonly _assetsService: AssetsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new asset for an attack surface' })\n  @ApiResponse({\n    status: 201,\n    description: 'Asset has been successfully created.',\n    type: AssetResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiResponse({ status: 404, description: 'Attack surface not found.' })\n  async create(\n    @Param('projectId') projectId: string,\n    @Param('attackSurfaceId') attackSurfaceId: string,\n    @Body() createAssetDto: CreateAssetDto,\n    // @CurrentUser() user: User\n  ): Promise<AssetResponseDto> {\n    // const asset = await this._assetsService.create(\n    //   attackSurfaceId,\n    //   createAssetDto,\n    //   user\n    // );\n    // return plainToInstance(AssetResponseDto, asset);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all assets for an attack surface' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return all assets for the attack surface.',\n    type: [AssetResponseDto],\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiQuery({\n    name: 'skip',\n    required: false,\n    type: Number,\n    description: 'Number of records to skip',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Number of records to return',\n  })\n  async findAll(\n    @Param('projectId') projectId: string,\n    @Param('attackSurfaceId') attackSurfaceId: string,\n    // @CurrentUser() user: User\n    @Query('skip') skip?: number,\n    @Query('limit') limit?: number,\n  ): Promise<AssetResponseDto[]> {\n    // const assets = await this._assetsService.findAllByAttackSurface(\n    //   attackSurfaceId,\n    //   user\n    // );\n    // return assets.map(asset => plainToInstance(AssetResponseDto, asset));\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get an asset by id' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return the asset.',\n    type: AssetResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Asset not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async findOne(\n    @Param('projectId') projectId: string,\n    @Param('attackSurfaceId') attackSurfaceId: string,\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<AssetResponseDto> {\n    // const asset = await this._assetsService.findOne(id, user);\n    // if (asset.attackSurfaceId !== attackSurfaceId) {\n    //   throw new Error(\n    //     `Asset with ID ${id} does not belong to attack surface with ID ${attackSurfaceId}`,\n    //   );\n    // }\n    // return plainToInstance(AssetResponseDto, asset);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update an asset' })\n  @ApiResponse({\n    status: 200,\n    description: 'Asset has been successfully updated.',\n    type: AssetResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Asset not found.' })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async update(\n    @Param('projectId') projectId: string,\n    @Param('attackSurfaceId') attackSurfaceId: string,\n    @Param('id') id: string,\n    @Body() updateAssetDto: UpdateAssetDto,\n    // @CurrentUser() user: User\n  ): Promise<AssetResponseDto> {\n    // const asset = await this._assetsService.findOne(id, user);\n    // if (asset.attackSurfaceId !== attackSurfaceId) {\n    //   throw new Error(\n    //     `Asset with ID ${id} does not belong to attack surface with ID ${attackSurfaceId}`,\n    //   );\n    // }\n    // const updatedAsset = await this._assetsService.update(id, updateAssetDto, user);\n    // return plainToInstance(AssetResponseDto, updatedAsset);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete an asset' })\n  @ApiResponse({ status: 200, description: 'Asset has been successfully deleted.' })\n  @ApiResponse({ status: 404, description: 'Asset not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async remove(\n    @Param('projectId') projectId: string,\n    @Param('attackSurfaceId') attackSurfaceId: string,\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<void> {\n    // const asset = await this._assetsService.findOne(id, user);\n    // if (asset.attackSurfaceId !== attackSurfaceId) {\n    //   throw new Error(\n    //     `Asset with ID ${id} does not belong to attack surface with ID ${attackSurfaceId}`,\n    //   );\n    // }\n    // await this._assetsService.remove(id, user);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/assets.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/assets.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[289,292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[289,292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { AssetsService } from './assets.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Asset } from './entities/asset.entity';\n\ndescribe('AssetsService', () => {\n  let service: AssetsService;\n  let mockRepo: any;\n\n  beforeEach(async () => {\n    mockRepo = {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      // Add more mock methods as needed\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [AssetsService, { provide: getRepositoryToken(Asset), useValue: mockRepo }],\n    }).compile();\n\n    service = module.get<AssetsService>(AssetsService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  // Add more tests for AssetsService methods here\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/assets.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Asset } from './entities/asset.entity';\nimport { AttackSurfacesService } from '../attack-surfaces/attack-surfaces.service'; // To check parent ownership\nimport { User } from '../users/entities/user.entity'; // For CurrentUser type\n\n// Define a simplified User type for currentUser parameter\ninterface CurrentUser {\n  id: string;\n  roles: string[];\n  isSuperuser?: boolean;\n}\n\n@Injectable()\nexport class AssetsService {\n  constructor(\n    @InjectRepository(Asset)\n    private _assetsRepository: Repository<Asset>,\n    private _attackSurfacesService: AttackSurfacesService, // Inject AttackSurfacesService\n  ) {}\n\n  // No findAll without attack surface context, unless for an admin role\n  // async findAllAdmin(): Promise<Asset[]> {\n  //   return this._assetsRepository.find({ relations: ['attackSurface'] });\n  // }\n\n  async findAllByAttackSurface(\n    attackSurfaceId: string,\n    currentUser: CurrentUser,\n  ): Promise<Asset[]> {\n    // First, verify user has access to the parent attack surface\n    await this._attackSurfacesService.findOne(attackSurfaceId, currentUser);\n    // findOne in AttackSurfacesService already throws ForbiddenException if no access\n\n    return this._assetsRepository.find({\n      where: { attackSurfaceId },\n      relations: ['attackSurface'], // Include parent for context if needed\n    });\n  }\n\n  async findOne(id: string, currentUser: CurrentUser): Promise<Asset> {\n    const asset = await this._assetsRepository.findOne({\n      where: { id },\n      relations: ['attackSurface', 'attackSurface.project'], // Include parent and grandparent for full check\n    });\n\n    if (!asset) {\n      throw new NotFoundException(`Asset with ID ${id} not found`);\n    }\n\n    // Verify user has access to the parent attack surface (which checks project ownership)\n    if (asset.attackSurface) {\n      await this._attackSurfacesService.findOne(asset.attackSurface.id, currentUser);\n    } else {\n      // This case should ideally not happen\n      throw new NotFoundException(`Parent attack surface not found for asset ${id}`);\n    }\n\n    return asset;\n  }\n\n  async create(\n    attackSurfaceId: string,\n    assetData: Partial<Asset>,\n    currentUser: CurrentUser,\n  ): Promise<Asset> {\n    // Verify user has access to the parent attack surface\n    const attackSurface = await this._attackSurfacesService.findOne(attackSurfaceId, currentUser);\n\n    const assetToCreate = {\n      ...assetData,\n      attackSurfaceId: attackSurface.id, // Ensure attackSurfaceId is set correctly\n      attackSurface: attackSurface, // Associate with the fetched parent\n    };\n\n    const asset = this._assetsRepository.create(assetToCreate);\n    return this._assetsRepository.save(asset);\n  }\n\n  async update(id: string, assetData: Partial<Asset>, currentUser: CurrentUser): Promise<Asset> {\n    const asset = await this.findOne(id, currentUser); // This already checks parent ownership\n\n    // Prevent changing the parent attack surface (attackSurfaceId) unless specific logic allows it\n    if (assetData.attackSurfaceId && assetData.attackSurfaceId !== asset.attackSurfaceId) {\n      if (!currentUser.isSuperuser && !(currentUser.roles && currentUser.roles.includes('admin'))) {\n        throw new ForbiddenException('You cannot change the parent attack surface of an asset.');\n      }\n      // If allowing change, re-verify access to the new parent attack surface\n      await this._attackSurfacesService.findOne(assetData.attackSurfaceId, currentUser);\n    }\n\n    this._assetsRepository.merge(asset, assetData);\n    return this._assetsRepository.save(asset);\n  }\n\n  async remove(id: string, currentUser: CurrentUser): Promise<void> {\n    await this.findOne(id, currentUser); // Ensures parent ownership before removal\n    await this._assetsRepository.delete(id);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/dto/asset-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/dto/create-asset.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/dto/update-asset.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/entities/asset.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/assets/enums/asset-type.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/attack-surfaces.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UseGuards' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'plainToInstance' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":43,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createAttackSurfaceDto' is defined but never used.","line":44,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":77,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'skip' is defined but never used.","line":79,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is defined but never used.","line":80,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":100,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":101,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":125,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":126,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateAttackSurfaceDto' is defined but never used.","line":127,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectId' is defined but never used.","line":151,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":152,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\nimport { AttackSurfacesService } from './attack-surfaces.service';\nimport {\n  CreateAttackSurfaceDto,\n  UpdateAttackSurfaceDto,\n  AttackSurfaceResponseDto,\n  AttackSurfaceWithAssetsDto,\n} from './dto';\nimport { plainToInstance } from 'class-transformer';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n// import { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { User } from '../users/entities/user.entity';\n\n@ApiTags('attack-surfaces')\n@ApiBearerAuth()\n@Controller('projects/:projectId/attack-surfaces')\n// @UseGuards(JwtAuthGuard)\nexport class AttackSurfacesController {\n  constructor(private readonly _attackSurfacesService: AttackSurfacesService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new attack surface for a project' })\n  @ApiResponse({\n    status: 201,\n    description: 'Attack surface has been successfully created.',\n    type: AttackSurfaceResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiResponse({ status: 404, description: 'Project not found.' })\n  async create(\n    @Param('projectId') projectId: string,\n    @Body() createAttackSurfaceDto: CreateAttackSurfaceDto,\n    // @CurrentUser() user: User\n  ): Promise<AttackSurfaceResponseDto> {\n    // const attackSurface = await this._attackSurfacesService.create(\n    //   projectId,\n    //   createAttackSurfaceDto,\n    //   user\n    // );\n    // return plainToInstance(AttackSurfaceResponseDto, attackSurface);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all attack surfaces for a project' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return all attack surfaces for the project.',\n    type: [AttackSurfaceResponseDto],\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiQuery({\n    name: 'skip',\n    required: false,\n    type: Number,\n    description: 'Number of records to skip',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Number of records to return',\n  })\n  async findAll(\n    @Param('projectId') projectId: string,\n    // @CurrentUser() user: User\n    @Query('skip') skip?: number,\n    @Query('limit') limit?: number,\n  ): Promise<AttackSurfaceResponseDto[]> {\n    // const attackSurfaces = await this._attackSurfacesService.findAllByProject(\n    //   projectId,\n    //   user\n    // );\n    // return attackSurfaces.map(as => plainToInstance(AttackSurfaceResponseDto, as));\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get an attack surface by id' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return the attack surface.',\n    type: AttackSurfaceWithAssetsDto,\n  })\n  @ApiResponse({ status: 404, description: 'Attack surface not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async findOne(\n    @Param('projectId') projectId: string,\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<AttackSurfaceWithAssetsDto> {\n    // const attackSurface = await this._attackSurfacesService.findOne(id, user);\n    // if (attackSurface.projectId !== projectId) {\n    //   throw new Error(\n    //     `Attack surface with ID ${id} does not belong to project with ID ${projectId}`,\n    //   );\n    // }\n    // return plainToInstance(AttackSurfaceWithAssetsDto, attackSurface);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update an attack surface' })\n  @ApiResponse({\n    status: 200,\n    description: 'Attack surface has been successfully updated.',\n    type: AttackSurfaceResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Attack surface not found.' })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async update(\n    @Param('projectId') projectId: string,\n    @Param('id') id: string,\n    @Body() updateAttackSurfaceDto: UpdateAttackSurfaceDto,\n    // @CurrentUser() user: User\n  ): Promise<AttackSurfaceResponseDto> {\n    // const attackSurface = await this._attackSurfacesService.findOne(id, user);\n    // if (attackSurface.projectId !== projectId) {\n    //   throw new Error(\n    //     `Attack surface with ID ${id} does not belong to project with ID ${projectId}`,\n    //   );\n    // }\n    // const updatedAttackSurface = await this._attackSurfacesService.update(\n    //   id,\n    //   updateAttackSurfaceDto,\n    //   user\n    // );\n    // return plainToInstance(AttackSurfaceResponseDto, updatedAttackSurface);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete an attack surface' })\n  @ApiResponse({ status: 200, description: 'Attack surface has been successfully deleted.' })\n  @ApiResponse({ status: 404, description: 'Attack surface not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async remove(\n    @Param('projectId') projectId: string,\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<void> {\n    // const attackSurface = await this._attackSurfacesService.findOne(id, user);\n    // if (attackSurface.projectId !== projectId) {\n    //   throw new Error(\n    //     `Attack surface with ID ${id} does not belong to project with ID ${projectId}`,\n    //   );\n    // }\n    // await this._attackSurfacesService.remove(id, user);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/attack-surfaces.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/attack-surfaces.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { AttackSurfacesService } from './attack-surfaces.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { AttackSurface } from './entities/attack-surface.entity';\n\ndescribe('AttackSurfacesService', () => {\n  let service: AttackSurfacesService;\n  let mockRepo: any;\n\n  beforeEach(async () => {\n    mockRepo = {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      // Add more mock methods as needed\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AttackSurfacesService,\n        { provide: getRepositoryToken(AttackSurface), useValue: mockRepo },\n      ],\n    }).compile();\n\n    service = module.get<AttackSurfacesService>(AttackSurfacesService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  // Add more tests for AttackSurfacesService methods here\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/attack-surfaces.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AttackSurface } from './entities/attack-surface.entity';\nimport { ProjectsService } from '../projects/projects.service'; // To check project ownership\nimport { User } from '../users/entities/user.entity'; // For CurrentUser type\n\n// Define a simplified User type for currentUser parameter\ninterface CurrentUser {\n  id: string;\n  roles: string[];\n  isSuperuser?: boolean;\n}\n\n@Injectable()\nexport class AttackSurfacesService {\n  constructor(\n    @InjectRepository(AttackSurface)\n    private _attackSurfacesRepository: Repository<AttackSurface>,\n    private _projectsService: ProjectsService, // Inject ProjectsService\n  ) {}\n\n  // No findAll without project context, unless for an admin role not yet defined for this service\n  // async findAllAdmin(): Promise<AttackSurface[]> {\n  //   return this._attackSurfacesRepository.find({ relations: ['project', 'assets'] });\n  // }\n\n  async findAllByProject(projectId: string, currentUser: CurrentUser): Promise<AttackSurface[]> {\n    // First, verify user has access to the project\n    await this._projectsService.findOne(projectId, currentUser);\n    // findOne in ProjectsService already throws ForbiddenException if no access\n\n    return this._attackSurfacesRepository.find({\n      where: { projectId },\n      relations: ['assets', 'project'], // Include project for context if needed\n    });\n  }\n\n  async findOne(id: string, currentUser: CurrentUser): Promise<AttackSurface> {\n    const attackSurface = await this._attackSurfacesRepository.findOne({\n      where: { id },\n      relations: ['assets', 'project'], // Include project to check its ownership\n    });\n\n    if (!attackSurface) {\n      throw new NotFoundException(`Attack surface with ID ${id} not found`);\n    }\n\n    // Verify user has access to the parent project\n    if (attackSurface.project) {\n      // Should always have a project\n      await this._projectsService.findOne(attackSurface.project.id, currentUser);\n    } else {\n      // This case should ideally not happen if data integrity is maintained\n      throw new NotFoundException(`Parent project not found for attack surface ${id}`);\n    }\n\n    return attackSurface;\n  }\n\n  async create(\n    projectId: string,\n    attackSurfaceData: Partial<AttackSurface>,\n    currentUser: CurrentUser,\n  ): Promise<AttackSurface> {\n    // Verify user has access to the project before creating an attack surface under it\n    const project = await this._projectsService.findOne(projectId, currentUser);\n\n    const attackSurfaceToCreate = {\n      ...attackSurfaceData,\n      projectId: project.id, // Ensure projectId is set correctly\n      project: project, // Associate with the fetched project\n    };\n\n    const attackSurface = this._attackSurfacesRepository.create(attackSurfaceToCreate);\n    return this._attackSurfacesRepository.save(attackSurface);\n  }\n\n  async update(\n    id: string,\n    attackSurfaceData: Partial<AttackSurface>,\n    currentUser: CurrentUser,\n  ): Promise<AttackSurface> {\n    const attackSurface = await this.findOne(id, currentUser); // This already checks project ownership\n\n    // Prevent changing the parent project (projectId) unless specific logic allows it\n    if (attackSurfaceData.projectId && attackSurfaceData.projectId !== attackSurface.projectId) {\n      if (!currentUser.isSuperuser && !(currentUser.roles && currentUser.roles.includes('admin'))) {\n        throw new ForbiddenException('You cannot change the parent project of an attack surface.');\n      }\n      // If allowing change, re-verify access to the new project\n      await this._projectsService.findOne(attackSurfaceData.projectId, currentUser);\n    }\n\n    this._attackSurfacesRepository.merge(attackSurface, attackSurfaceData);\n    return this._attackSurfacesRepository.save(attackSurface);\n  }\n\n  async remove(id: string, currentUser: CurrentUser): Promise<void> {\n    await this.findOne(id, currentUser); // Ensures project ownership before removal\n    await this._attackSurfacesRepository.delete(id);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/dto/attack-surface-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/dto/attack-surface-with-assets.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/dto/create-attack-surface.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/dto/update-attack-surface.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/entities/attack-surface.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/attack-surfaces/enums/surface-type.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/auth.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loginDto' is defined but never used.","line":20,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1070,1073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1070,1073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refreshDto' is defined but never used.","line":30,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1551,1554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1551,1554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":49,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2148,2151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2148,2151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2162,2165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2162,2165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2252,2255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2252,2255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registerDto' is defined but never used.","line":64,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2657,2660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2657,2660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2671,2674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2671,2674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2767,2770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2767,2770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Body, Controller, Get, Post, Req } from '@nestjs/common';\n// eslint-disable-next-line max-len\nimport { ApiOperation, ApiResponse, ApiTags, ApiBearerAuth } from '@nestjs/swagger';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n// import { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { LoginDto } from './dto/login.dto';\nimport { TokenRefreshDto } from './dto/token-refresh.dto';\nimport { TokenResponseDto } from './dto/token-response.dto';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  // constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  @ApiOperation({ summary: 'OAuth2 compatible token login' })\n  @ApiResponse({ status: 200, description: 'Token response', type: TokenResponseDto })\n  @ApiResponse({ status: 400, description: 'Invalid credentials.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  login(@Body() loginDto: LoginDto): Promise<TokenResponseDto> {\n    // return this.authService.login(loginDto);\n    return Promise.resolve(null as any); // Placeholder\n  }\n\n  @Post('refresh')\n  @ApiOperation({ summary: 'Refresh access token' })\n  @ApiResponse({ status: 200, description: 'Token response', type: TokenResponseDto })\n  @ApiResponse({ status: 400, description: 'Invalid refresh token.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  refresh(@Body() refreshDto: TokenRefreshDto): Promise<TokenResponseDto> {\n    // return this.authService.refresh(refreshDto);\n    return Promise.resolve(null as any); // Placeholder\n  }\n\n  @Post('logout')\n  @ApiOperation({ summary: 'Logout user (client-side only)' })\n  @ApiResponse({ status: 200, description: 'Successfully logged out' })\n  logout(): Promise<{ detail: string }> {\n    // return this.authService.logout();\n    return Promise.resolve({ detail: 'Successfully logged out' });\n  }\n\n  @Get('me')\n  @ApiOperation({ summary: 'Get current user' })\n  @ApiResponse({ status: 200, description: 'Return the current user.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  // @UseGuards(JwtAuthGuard)\n  me(@Req() req: any): Promise<any> {\n    // return this.authService.getMe(req.user);\n    return Promise.resolve(null as any); // Placeholder\n  }\n}\n\n@ApiTags('register')\n@Controller('register')\nexport class RegisterController {\n  // constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiResponse({ status: 201, description: 'User registered.' })\n  @ApiResponse({ status: 400, description: 'Invalid registration data.' })\n  register(@Body() registerDto: any): Promise<any> {\n    // return this.authService.register(registerDto);\n    return Promise.resolve(null as any); // Placeholder\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/auth.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/auth.service.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hashedPassword' is assigned a value but never used.","line":25,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/dto/login.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/dto/token-payload.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/dto/token-refresh.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/dto/token-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/jwt.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/local.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/roles.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/roles.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/auth/roles.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/dto/finding-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/entities/finding.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/enums/severity.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/findings.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/findings.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[301,304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[301,304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { FindingsService } from './findings.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Finding } from './entities/finding.entity';\n\ndescribe('FindingsService', () => {\n  let service: FindingsService;\n  let mockRepo: any;\n\n  beforeEach(async () => {\n    mockRepo = {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      // Add more mock methods as needed\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [FindingsService, { provide: getRepositoryToken(Finding), useValue: mockRepo }],\n    }).compile();\n\n    service = module.get<FindingsService>(FindingsService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  // Add more tests for FindingsService methods here\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/findings/findings.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Finding } from './entities/finding.entity';\nimport { ScansService } from '../scans/scans.service'; // To check parent scan ownership\nimport { User } from '../users/entities/user.entity'; // For CurrentUser type\n\n// Define a simplified User type for currentUser parameter\ninterface CurrentUser {\n  id: string;\n  roles: string[];\n  isSuperuser?: boolean;\n}\n\n@Injectable()\nexport class FindingsService {\n  constructor(\n    @InjectRepository(Finding)\n    private _findingsRepository: Repository<Finding>,\n    private _scansService: ScansService, // Inject ScansService\n  ) {}\n\n  // findAll might be too broad. Usually, findings are fetched per scan.\n  // async findAllAdmin(): Promise<Finding[]> { // If an admin needs all findings\n  //   return this._findingsRepository.find({ relations: ['scan'] });\n  // }\n\n  async findAllByScan(scanId: string, currentUser: CurrentUser): Promise<Finding[]> {\n    // Verify user has access to the scan first\n    await this._scansService.findOne(scanId, currentUser);\n\n    return this._findingsRepository.find({\n      where: { scanId }, // Simpler query if scanId is directly on Finding\n      relations: ['scan'], // Include scan for context if needed\n    });\n  }\n\n  async findOne(id: string, currentUser: CurrentUser): Promise<Finding> {\n    const finding = await this._findingsRepository.findOne({\n      where: { id },\n      relations: ['scan', 'scan.user'], // Include scan and its user for ownership check\n    });\n\n    if (!finding) {\n      throw new NotFoundException(`Finding with ID ${id} not found`);\n    }\n\n    if (!finding.scan) {\n      // Data integrity issue\n      throw new NotFoundException(`Parent scan not found for finding ID ${id}`);\n    }\n\n    // Verify user has access to the parent scan\n    await this._scansService.findOne(finding.scan.id, currentUser);\n\n    return finding;\n  }\n\n  // Create is likely internal, called by ScansService or a scan worker.\n  // If direct creation is needed, it must ensure scanId exists and user has access.\n  async create(\n    scanId: string,\n    findingData: Partial<Finding>,\n    currentUser: CurrentUser,\n  ): Promise<Finding> {\n    const scan = await this._scansService.findOne(scanId, currentUser); // Check access to parent scan\n\n    const newFindingData = {\n      ...findingData,\n      scanId: scan.id, // Ensure scanId is set from the verified scan\n      scan: scan,\n    };\n    const finding = this._findingsRepository.create(newFindingData);\n    return this._findingsRepository.save(finding);\n  }\n\n  async createMany(\n    scanId: string,\n    findingsData: Partial<Finding>[],\n    currentUser: CurrentUser,\n  ): Promise<Finding[]> {\n    const scan = await this._scansService.findOne(scanId, currentUser); // Check access\n\n    const findingsToCreate = findingsData.map(data => ({\n      ...data,\n      scanId: scan.id,\n      scan: scan,\n    }));\n    const findings = this._findingsRepository.create(findingsToCreate);\n    return this._findingsRepository.save(findings);\n  }\n\n  // Update is also likely internal or highly restricted.\n  async update(\n    id: string,\n    findingData: Partial<Finding>,\n    currentUser: CurrentUser,\n  ): Promise<Finding> {\n    const finding = await this.findOne(id, currentUser); // Verifies ownership via parent scan\n\n    // Prevent changing the parent scan (scanId)\n    if (findingData.scanId && findingData.scanId !== finding.scanId) {\n      throw new ForbiddenException('Cannot change the parent scan of a finding.');\n    }\n\n    this._findingsRepository.merge(finding, findingData);\n    return this._findingsRepository.save(finding);\n  }\n\n  // Remove is likely internal or highly restricted.\n  async remove(id: string, currentUser: CurrentUser): Promise<void> {\n    await this.findOne(id, currentUser); // Verifies ownership\n    await this._findingsRepository.delete(id);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/health/dto/health-check-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/health/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/health/health.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[612,615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[612,615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Controller, Get } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n// import { HealthCheckResponseDto } from './dto/health-check-response.dto';\n\n@ApiTags('health')\n@Controller('health')\nexport class HealthController {\n  @Get()\n  @ApiOperation({ summary: 'Health check endpoint to verify API and database connection' })\n  @ApiResponse({\n    status: 200,\n    description: 'Health check response.',\n    schema: {\n      example: {\n        status: 'ok',\n        api_version: '1.0.0',\n        database_connected: true,\n      },\n    },\n  })\n  healthCheck(): Promise<any> {\n    // return this.healthService.check();\n    return Promise.resolve({\n      status: 'ok',\n      api_version: '1.0.0',\n      database_connected: true,\n    }); // Placeholder\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/health/health.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/health/health.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/health/health.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/dto/create-project.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/dto/project-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/dto/update-project.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/entities/project.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/projects.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Project' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'plainToInstance' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Roles' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Role' is defined but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createProjectDto' is defined but never used.","line":40,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'skip' is defined but never used.","line":73,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is defined but never used.","line":74,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":91,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":110,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateProjectDto' is defined but never used.","line":111,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":125,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\nimport { ProjectsService } from './projects.service';\nimport { CreateProjectDto, UpdateProjectDto, ProjectResponseDto } from './dto';\nimport { Project } from './entities/project.entity';\nimport { plainToInstance } from 'class-transformer';\nimport { User } from '../users/entities/user.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RolesGuard } from '../auth/roles.guard';\nimport { Roles } from '../auth/roles.decorator';\nimport { Role } from '../auth/roles.enum';\n\n@ApiTags('projects')\n@UseGuards(AuthGuard('jwt'), RolesGuard)\n@ApiBearerAuth()\n@Controller('projects')\nexport class ProjectsController {\n  constructor(private readonly _projectsService: ProjectsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new project' })\n  @ApiResponse({\n    status: 201,\n    description: 'Project has been successfully created.',\n    type: ProjectResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async create(\n    @Body() createProjectDto: CreateProjectDto,\n    // @CurrentUser() user: User\n  ): Promise<ProjectResponseDto> {\n    // const project = await this._projectsService.create(\n    //   createProjectDto,\n    //   user\n    // );\n    // return plainToInstance(ProjectResponseDto, project);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all projects for the current user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return all projects for the current user.',\n    type: [ProjectResponseDto],\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiQuery({\n    name: 'skip',\n    required: false,\n    type: Number,\n    description: 'Number of records to skip',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Number of records to return',\n  })\n  async findAll(\n    // @CurrentUser() user: User\n    @Query('skip') skip?: number,\n    @Query('limit') limit?: number,\n  ): Promise<ProjectResponseDto[]> {\n    // const projects = await this._projectsService.findAllByUser(user);\n    // return projects.map(project => plainToInstance(ProjectResponseDto, project));\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a project by id' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return the project.',\n    type: ProjectResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Project not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async findOne(\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<ProjectResponseDto> {\n    // const project = await this._projectsService.findOne(id, user);\n    // return plainToInstance(ProjectResponseDto, project);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a project' })\n  @ApiResponse({\n    status: 200,\n    description: 'Project has been successfully updated.',\n    type: ProjectResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Project not found.' })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateProjectDto: UpdateProjectDto,\n    // @CurrentUser() user: User\n  ): Promise<ProjectResponseDto> {\n    // const project = await this._projectsService.update(id, updateProjectDto, user);\n    // return plainToInstance(ProjectResponseDto, project);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a project' })\n  @ApiResponse({ status: 200, description: 'Project has been successfully deleted.' })\n  @ApiResponse({ status: 404, description: 'Project not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async remove(\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<void> {\n    // await this._projectsService.remove(id, user);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/projects.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/projects.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[301,304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[301,304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { ProjectsService } from './projects.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Project } from './entities/project.entity';\n\ndescribe('ProjectsService', () => {\n  let service: ProjectsService;\n  let mockRepo: any;\n\n  beforeEach(async () => {\n    mockRepo = {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      // Add more mock methods as needed\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [ProjectsService, { provide: getRepositoryToken(Project), useValue: mockRepo }],\n    }).compile();\n\n    service = module.get<ProjectsService>(ProjectsService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  // Add more tests for ProjectsService methods here\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/projects/projects.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/dto/scan-result-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/dto/scan-result-summary.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/entities/scan-result.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/scan-results.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/scan-results.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { ScanResultsService } from './scan-results.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { ScanResult } from './entities/scan-result.entity';\n\ndescribe('ScanResultsService', () => {\n  let service: ScanResultsService;\n  let mockRepo: any;\n\n  beforeEach(async () => {\n    mockRepo = {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      // Add more mock methods as needed\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ScanResultsService,\n        { provide: getRepositoryToken(ScanResult), useValue: mockRepo },\n      ],\n    }).compile();\n\n    service = module.get<ScanResultsService>(ScanResultsService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  // Add more tests for ScanResultsService methods here\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scan-results/scan-results.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ScanResult } from './entities/scan-result.entity';\nimport { ScansService } from '../scans/scans.service'; // To check parent scan ownership\nimport { User } from '../users/entities/user.entity'; // For CurrentUser type\n\n// Define a simplified User type for currentUser parameter\ninterface CurrentUser {\n  id: string;\n  roles: string[];\n  isSuperuser?: boolean;\n}\n\n@Injectable()\nexport class ScanResultsService {\n  constructor(\n    @InjectRepository(ScanResult)\n    private _scanResultsRepository: Repository<ScanResult>,\n    private _scansService: ScansService, // Inject ScansService\n  ) {}\n\n  // findAll might be too broad. Usually, results are fetched per scan.\n  // async findAllAdmin(): Promise<ScanResult[]> { // If an admin needs all results\n  //   return this._scanResultsRepository.find({ relations: ['scan', 'findings'] });\n  // }\n\n  async findOne(id: string, currentUser: CurrentUser): Promise<ScanResult> {\n    const scanResult = await this._scanResultsRepository.findOne({\n      where: { id },\n      relations: ['scan', 'scan.user', 'findings'], // Include scan and its user for ownership check\n    });\n\n    if (!scanResult) {\n      throw new NotFoundException(`Scan result with ID ${id} not found`);\n    }\n\n    if (!scanResult.scan) {\n      // Data integrity issue, scan result should always have a scan\n      throw new NotFoundException(`Parent scan not found for scan result ID ${id}`);\n    }\n\n    // Verify user has access to the parent scan\n    await this._scansService.findOne(scanResult.scan.id, currentUser);\n\n    return scanResult;\n  }\n\n  async findByScan(scanId: string, currentUser: CurrentUser): Promise<ScanResult> {\n    // Verify user has access to the scan first\n    await this._scansService.findOne(scanId, currentUser);\n\n    const scanResult = await this._scanResultsRepository.findOne({\n      where: { scan: { id: scanId } }, // TypeORM relation query\n      relations: ['findings', 'scan'],\n    });\n\n    if (!scanResult) {\n      // It's possible a scan exists but has no result yet.\n      // Depending on requirements, this might not be an error, or could return null/empty.\n      // For now, maintaining NotFoundException if no result entity exists for the scan.\n      throw new NotFoundException(`Scan result for scan ID ${scanId} not found`);\n    }\n\n    return scanResult;\n  }\n\n  // Create is likely internal, called by ScansService when a scan completes.\n  // If direct creation is needed, it must ensure scanId exists and user has access.\n  async create(\n    scanId: string,\n    scanResultData: Partial<ScanResult>,\n    currentUser: CurrentUser,\n  ): Promise<ScanResult> {\n    const scan = await this._scansService.findOne(scanId, currentUser); // Check access to parent scan\n\n    const newScanResultData = {\n      ...scanResultData,\n      scanId: scan.id, // Ensure scanId is set from the verified scan\n      scan: scan,\n    };\n    const scanResult = this._scanResultsRepository.create(newScanResultData);\n    return this._scanResultsRepository.save(scanResult);\n  }\n\n  // Update is also likely internal or highly restricted.\n  async update(\n    id: string,\n    scanResultData: Partial<ScanResult>,\n    currentUser: CurrentUser,\n  ): Promise<ScanResult> {\n    const scanResult = await this.findOne(id, currentUser); // Verifies ownership via parent scan\n\n    // Prevent changing the parent scan (scanId)\n    if (scanResultData.scanId && scanResultData.scanId !== scanResult.scanId) {\n      throw new ForbiddenException('Cannot change the parent scan of a scan result.');\n    }\n\n    this._scanResultsRepository.merge(scanResult, scanResultData);\n    return this._scanResultsRepository.save(scanResult);\n  }\n\n  // Remove is likely internal or highly restricted.\n  async remove(id: string, currentUser: CurrentUser): Promise<void> {\n    await this.findOne(id, currentUser); // Verifies ownership\n    await this._scanResultsRepository.delete(id);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/dto/create-scan.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/dto/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/dto/scan-response.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/dto/update-scan.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/entities/scan.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/enums/scan-status.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/enums/scan-type.enum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/scans.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UseGuards' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'plainToInstance' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createScanDto' is defined but never used.","line":37,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'skip' is defined but never used.","line":70,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is defined but never used.","line":71,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":88,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":107,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateScanDto' is defined but never used.","line":108,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":122,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":134,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4523,4526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4523,4526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\nimport { ScansService } from './scans.service';\nimport { CreateScanDto, UpdateScanDto, ScanResponseDto } from './dto';\nimport { plainToInstance } from 'class-transformer';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n// import { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { User } from '../users/entities/user.entity';\n\n@ApiTags('scans')\n@ApiBearerAuth()\n@Controller('scans')\n// @UseGuards(JwtAuthGuard)\nexport class ScansController {\n  constructor(private readonly _scansService: ScansService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new scan' })\n  @ApiResponse({\n    status: 201,\n    description: 'Scan has been successfully created.',\n    type: ScanResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async create(\n    @Body() createScanDto: CreateScanDto,\n    // @CurrentUser() user: User\n  ): Promise<ScanResponseDto> {\n    // const scan = await this._scansService.create(\n    //   createScanDto,\n    //   user\n    // );\n    // return plainToInstance(ScanResponseDto, scan);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all scans for the current user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return all scans for the current user.',\n    type: [ScanResponseDto],\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiQuery({\n    name: 'skip',\n    required: false,\n    type: Number,\n    description: 'Number of records to skip',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Number of records to return',\n  })\n  async findAll(\n    // @CurrentUser() user: User\n    @Query('skip') skip?: number,\n    @Query('limit') limit?: number,\n  ): Promise<ScanResponseDto[]> {\n    // const scans = await this._scansService.findAllByUser(user);\n    // return scans.map(scan => plainToInstance(ScanResponseDto, scan));\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a scan by id' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return the scan.',\n    type: ScanResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Scan not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async findOne(\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<ScanResponseDto> {\n    // const scan = await this._scansService.findOne(id, user);\n    // return plainToInstance(ScanResponseDto, scan);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a scan' })\n  @ApiResponse({\n    status: 200,\n    description: 'Scan has been successfully updated.',\n    type: ScanResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Scan not found.' })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateScanDto: UpdateScanDto,\n    // @CurrentUser() user: User\n  ): Promise<ScanResponseDto> {\n    // const scan = await this._scansService.update(id, updateScanDto, user);\n    // return plainToInstance(ScanResponseDto, scan);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a scan' })\n  @ApiResponse({ status: 200, description: 'Scan has been successfully deleted.' })\n  @ApiResponse({ status: 404, description: 'Scan not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async remove(\n    @Param('id') id: string,\n    // @CurrentUser() user: User\n  ): Promise<void> {\n    // await this._scansService.remove(id, user);\n    throw new Error('Auth not implemented: uncomment and implement when ready.');\n  }\n\n  @Get(':id/results')\n  @ApiOperation({ summary: 'Get results for a specific scan' })\n  @ApiResponse({ status: 200, description: 'Return the scan results.' })\n  @ApiResponse({ status: 404, description: 'Scan not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  async getResults(@Param('id') id: string): Promise<any> {\n    // return this._scansService.getResults(id);\n    return Promise.resolve(undefined); // Placeholder\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/scans.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/scans.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[283,286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[283,286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { ScansService } from './scans.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Scan } from './entities/scan.entity';\n\ndescribe('ScansService', () => {\n  let service: ScansService;\n  let mockRepo: any;\n\n  beforeEach(async () => {\n    mockRepo = {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      // Add more mock methods as needed\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [ScansService, { provide: getRepositoryToken(Scan), useValue: mockRepo }],\n    }).compile();\n\n    service = module.get<ScansService>(ScansService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  // Add more tests for ScansService methods here\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/scans/scans.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/dto/create-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/dto/update-user.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/entities/user.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/users.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3131,3134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3131,3134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":97,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3469,3472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3469,3472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3581,3584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3581,3584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":108,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3890,3893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3890,3893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateUserDto' is defined but never used.","line":108,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4053,4056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4053,4056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RolesGuard } from '../auth/roles.guard';\nimport { Roles } from '../auth/roles.decorator';\nimport { Role } from '../auth/roles.enum';\n\n@ApiTags('users')\n@UseGuards(AuthGuard('jwt'), RolesGuard)\n@ApiBearerAuth()\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly _usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User has been successfully created.' })\n  @ApiResponse({ status: 400, description: 'Bad request.' })\n  // Registration endpoint: remove guards if public registration is allowed\n  // If only admins can create users, uncomment the next line:\n  // @Roles(Role.Admin)\n  create(@Body() createUserDto: CreateUserDto): Promise<User> {\n    return this._usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'Return all users.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @Roles(Role.Admin)\n  findAll(): Promise<User[]> {\n    return this._usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a user by id' })\n  @ApiResponse({ status: 200, description: 'Return the user.' })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  findOne(@Param('id') id: string): Promise<User> {\n    return this._usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: 200, description: 'User has been successfully updated.' })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {\n    return this._usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User has been successfully deleted.' })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  remove(@Param('id') id: string): Promise<User> {\n    return this._usersService.remove(id);\n  }\n\n  @Get('me')\n  @ApiOperation({ summary: 'Get current user' })\n  @ApiResponse({ status: 200, description: 'Return the current user.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  // @UseGuards(JwtAuthGuard)\n  getMe(): Promise<User> {\n    // return this._usersService.getMe(req.user);\n    return Promise.resolve(null as any); // Placeholder\n  }\n\n  @Post('ensure-in-db')\n  @ApiOperation({ summary: 'Ensure the current user exists in the database' })\n  @ApiResponse({ status: 200, description: 'Return the current user.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  // @UseGuards(JwtAuthGuard)\n  ensureInDb(@Req() req: any): Promise<User> {\n    // return this._usersService.ensureInDb(req.user);\n    return Promise.resolve(null as any); // Placeholder\n  }\n\n  @Put('me')\n  @ApiOperation({ summary: 'Update current user' })\n  @ApiResponse({ status: 200, description: 'User has been successfully updated.' })\n  @ApiResponse({ status: 401, description: 'Unauthorized.' })\n  @ApiBearerAuth()\n  // @UseGuards(JwtAuthGuard)\n  updateMe(@Req() req: any, @Body() updateUserDto: UpdateUserDto): Promise<User> {\n    // return this._usersService.updateMe(req.user, updateUserDto);\n    return Promise.resolve(null as any); // Placeholder\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/users.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/users.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/src/modules/users/users.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/test/users.e2e-spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/typeorm.config.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `DataSource` with `·DataSource·`","line":1,"column":9,"nodeType":null,"messageId":"replace","endLine":1,"endColumn":19,"fix":{"range":[8,18],"text":" DataSource "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `path:·`.env.${process.env.NODE_ENV·||·'development'}`` with `·path:·`.env.${process.env.NODE_ENV·||·'development'}`·`","line":5,"column":16,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":69,"fix":{"range":[131,184],"text":" path: `.env.${process.env.NODE_ENV || 'development'}` "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":8,"column":3,"nodeType":null,"messageId":"delete","endLine":8,"endColumn":5,"fix":{"range":[223,225],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":9,"column":1,"nodeType":null,"messageId":"delete","endLine":9,"endColumn":3,"fix":{"range":[243,245],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":10,"column":3,"nodeType":null,"messageId":"delete","endLine":10,"endColumn":5,"fix":{"range":[290,292],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":11,"column":1,"nodeType":null,"messageId":"delete","endLine":11,"endColumn":3,"fix":{"range":[342,344],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":12,"column":3,"nodeType":null,"messageId":"delete","endLine":12,"endColumn":5,"fix":{"range":[396,398],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `··`","line":13,"column":1,"nodeType":null,"messageId":"replace","endLine":13,"endColumn":5,"fix":{"range":[446,450],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":14,"column":3,"nodeType":null,"messageId":"delete","endLine":14,"endColumn":5,"fix":{"range":[501,503],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `····` with `··`","line":15,"column":1,"nodeType":null,"messageId":"replace","endLine":15,"endColumn":5,"fix":{"range":[543,547],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":16,"column":1,"nodeType":null,"messageId":"delete","endLine":16,"endColumn":3,"fix":{"range":[590,592],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":17,"column":3,"nodeType":null,"messageId":"delete","endLine":17,"endColumn":5,"fix":{"range":[655,657],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":18,"column":1,"nodeType":null,"messageId":"delete","endLine":18,"endColumn":3,"fix":{"range":[700,702],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":19,"column":3,"nodeType":null,"messageId":"delete","endLine":19,"endColumn":5,"fix":{"range":[741,743],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":20,"column":4,"nodeType":null,"messageId":"insert","endLine":20,"endColumn":4,"fix":{"range":[768,768],"text":"\n"}}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":15,"fixableWarningCount":0,"source":"import {DataSource} from 'typeorm';\nimport * as dotenv from 'dotenv';\n\n// Load environment variables from .env file\ndotenv.config({path: `.env.${process.env.NODE_ENV || 'development'}`});\n\nexport default new DataSource({\n    type: 'postgres',\n    host: process.env.dbHost || 'localhost',\n    port: parseInt(process.env.dbPort || '5432', 10),\n    username: process.env.dbUsername || 'postgres',\n    password: process.env.dbPassword || 'postgres',\n    database: process.env.dbDatabase || 'algosuite',\n    entities: ['src/**/*.entity{.ts,.js}'],\n    migrations: ['src/migrations/*{.ts,.js}'],\n    synchronize: false, // Never use synchronize in production\n    logging: process.env.dbLogging === 'true',\n    migrationsTableName: 'migrations',\n    migrationsRun: false,\n});","usedDeprecatedRules":[]},{"filePath":"/home/myadmin/IdeaProjects/Algosuite_test_3/nest-backend/webpack-hmr.config.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): webpack-hmr.config.js","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const webpack = require('webpack');\nconst nodeExternals = require('webpack-node-externals');\nconst {RunScriptWebpackPlugin} = require('run-script-webpack-plugin');\n\nmodule.exports = function (options, webpack) {\n    return {\n        ...options,\n        entry: ['webpack/hot/poll?100', options.entry],\n        externals: [\n            nodeExternals({\n                allowlist: ['webpack/hot/poll?100'],\n            }),\n        ],\n        plugins: [\n            ...options.plugins,\n            new webpack.HotModuleReplacementPlugin(),\n            new webpack.WatchIgnorePlugin({\n                paths: [/\\.js$/, /\\.d\\.ts$/],\n            }),\n            new RunScriptWebpackPlugin({\n                name: options.output.filename,\n                autoRestart: false,\n            }),\n        ],\n        mode: 'development',\n        devtool: 'source-map',\n    };\n};","usedDeprecatedRules":[]}]
